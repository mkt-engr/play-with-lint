env:
  es6: true # 対応環境をES6に
rules:
  # Rule一覧:https://eslint.org/docs/latest/rules/
  # TODO:importの順番をアルファベット順 or Reactは上にして残りはアルファベット順
  # ESLintが作成したルールの種類（https://eslint.org/docs/latest/rules/）
  # Possible Problems
  no-unused-vars: # 未使用変数の検知
    [
      error,
      {
        vars: all, # デフォルト（よくわからん）
        varsIgnorePattern: "[iI]gnored|^_", #未使用変数の検知を無視する指定（正規表現）
        # args: after-used, # チェックする変数の数
        args: after-used, # チェックする変数の数(all,after-used,none)
        argsIgnorePattern: ^_,
        caughtErrors: all, # try-catch文のcatchのエラー未使用チェック
        # caughtErrorsIgnore: "",
        destructuredArrayIgnorePattern: ^_,
        ignoreRestSiblings: false,
      },
    ]

  # Suggestions（）
  no-console: 0 # console.logの設定（0は許可）
  eqeqeq: [error, always] # ===の強制
  curly: [error, multi, consistent] # if文などの中身が２行以上ある時にのみ警告を出す if(condition) return true などは許される
  no-alert: [error] # フロントのalert文を使わない
  camelcase: # 変数名をキャメルケースにする
    [
      error,
      {
        properties: always, # デフォルト設定
      },
    ]
  func-style: [error, declaration, { allowArrowFunctions: true }]
  logical-assignment-operators: [error, always]
  # Layout & Formatting（これらのルールは、コードがどのように実行されるかよりも、コードがどのように見えるかを気にします。）
  semi: [error, always] # 文末のセミコロン
  quotes: [error, double, { allowTemplateLiterals: true }] #ダブルクオートとテンプレートリテラルを使えるようにする
  no-var: [error] # varは許可しない。let,constのみ。 --fixでvarをletに変更できる
  no-magic-numbers: [error, { ignore: [1] }] # マジックナンバーの不許可 ignoreで無視できる数を定義できる array.length-1とかはよく使うから1だけ無視するとか
  no-nested-ternary: [error] # ネストされた３項演算子を許可しない
  no-param-reassign: [
      error,
      {
        props: true, # bar.item = "change"とかも許さない。デフォはfalse
        ignorePropertyModificationsFor: ["hoge"], # hoge.item = "change"は許す
        ignorePropertyModificationsForRegex: ["^bar"], # 変更を許可する値を正規表現で書く
      },
    ]
  one-var: [
      error,
      # never, #（デフォはalways）
      {
        # var: always, # var:1つのスコープに1つの変数宣言(varは１回しかかけない)
        # let: never, # let:1つのスコープに複数の変数宣言(letを何回もかける)
        const: never, # 1つのスコープに複数の変数宣言できる(constを何回もかける)
        # const:(consecutive) 変数宣言は1つのスコープで何回でもOKやけど連続した変数宣言は1つにまとめる
        # separateRequires: true, # require("lodash")と分ける。
        # initialized: never, # 初期化された変数は１行で1つのスコープで
        # uninitialized: always, # 初期化されてない変数は1つのスコープに複数の宣言
      },
    ]
  one-var-declaration-per-line: [error, always] # こっちが１行に１変数しか定義できない
  prefer-const: [error] # 再代入されない場合はconstを強制する
  prefer-object-has-own: [error] # Object.prototype.hasOwnProperty.call()の利用は禁止してObject.hasOwn()を使わせる
  prefer-object-spread: [error] # object.assignを使わせずに...を強制する
  prefer-promise-reject-errors: [error] # Promiseでrejectする際はErrorオブジェクトのみ許容する
  require-await: [error] # async関数の中は必ずawaitを入れる
  sort-imports: [error]
  yoda: [
      error,
      never, # Yoda構文を許可しない
      {
        exceptRange: true, #  trueなら0 < number && number < 100は許す (デフォはfalse)
        onlyEquality: false, # trueならYodaルールは===or==の式のみ検知する（デフォはfalse）
      },
    ]
parserOptions:
  #   ecmaVersion: 6 # constとか``を使えるようにする
  ecmaVersion: "latest" # async,awaitを使うようにするにはこれが必要
  sourceType: module # export importを使えるようにする
  ecmaFeatures:
    impliedStrict: true # strict modeを有効にする
    # jsx: true # これでJSXの構文もフォローできるけどReactを使う場合はeslint-plugin-reactを使うべきとドキュメントに書いてある
noInlineConfig: false # インラインで書いたルールをすべて無効化する（厳しいからTrueにすることはなさそう）
reportUnusedDisableDirectives: true # 未使用のeslint-disableコメントがあれば通知する
overrides:
  - files: ["index.js"]
    rules:
      sort-imports: [0] # index.jsだけimportのソートのルールを課さない
